// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/10/2024 15:10:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    bus_dmx_1_8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bus_dmx_1_8_vlg_sample_tst(
	addr,
	x,
	sampler_tx
);
input [2:0] addr;
input [7:0] x;
output sampler_tx;

reg sample;
time current_time;
always @(addr or x)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module bus_dmx_1_8_vlg_check_tst (
	y0,
	y1,
	y2,
	y3,
	y4,
	y5,
	y6,
	y7,
	sampler_rx
);
input [7:0] y0;
input [7:0] y1;
input [7:0] y2;
input [7:0] y3;
input [7:0] y4;
input [7:0] y5;
input [7:0] y6;
input [7:0] y7;
input sampler_rx;

reg [7:0] y0_expected;
reg [7:0] y1_expected;
reg [7:0] y2_expected;
reg [7:0] y3_expected;
reg [7:0] y4_expected;
reg [7:0] y5_expected;
reg [7:0] y6_expected;
reg [7:0] y7_expected;

reg [7:0] y0_prev;
reg [7:0] y1_prev;
reg [7:0] y2_prev;
reg [7:0] y3_prev;
reg [7:0] y4_prev;
reg [7:0] y5_prev;
reg [7:0] y6_prev;
reg [7:0] y7_prev;

reg [7:0] y0_expected_prev;
reg [7:0] y1_expected_prev;
reg [7:0] y2_expected_prev;
reg [7:0] y3_expected_prev;
reg [7:0] y4_expected_prev;
reg [7:0] y5_expected_prev;
reg [7:0] y6_expected_prev;
reg [7:0] y7_expected_prev;

reg [7:0] last_y0_exp;
reg [7:0] last_y1_exp;
reg [7:0] last_y2_exp;
reg [7:0] last_y3_exp;
reg [7:0] last_y4_exp;
reg [7:0] last_y5_exp;
reg [7:0] last_y6_exp;
reg [7:0] last_y7_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	y0_prev = y0;
	y1_prev = y1;
	y2_prev = y2;
	y3_prev = y3;
	y4_prev = y4;
	y5_prev = y5;
	y6_prev = y6;
	y7_prev = y7;
end

// update expected /o prevs

always @(trigger)
begin
	y0_expected_prev = y0_expected;
	y1_expected_prev = y1_expected;
	y2_expected_prev = y2_expected;
	y3_expected_prev = y3_expected;
	y4_expected_prev = y4_expected;
	y5_expected_prev = y5_expected;
	y6_expected_prev = y6_expected;
	y7_expected_prev = y7_expected;
end


// expected y0[ 7 ]
initial
begin
	y0_expected[7] = 1'bX;
end 
// expected y0[ 6 ]
initial
begin
	y0_expected[6] = 1'bX;
end 
// expected y0[ 5 ]
initial
begin
	y0_expected[5] = 1'bX;
end 
// expected y0[ 4 ]
initial
begin
	y0_expected[4] = 1'bX;
end 
// expected y0[ 3 ]
initial
begin
	y0_expected[3] = 1'bX;
end 
// expected y0[ 2 ]
initial
begin
	y0_expected[2] = 1'bX;
end 
// expected y0[ 1 ]
initial
begin
	y0_expected[1] = 1'bX;
end 
// expected y0[ 0 ]
initial
begin
	y0_expected[0] = 1'bX;
end 
// expected y1[ 7 ]
initial
begin
	y1_expected[7] = 1'bX;
end 
// expected y1[ 6 ]
initial
begin
	y1_expected[6] = 1'bX;
end 
// expected y1[ 5 ]
initial
begin
	y1_expected[5] = 1'bX;
end 
// expected y1[ 4 ]
initial
begin
	y1_expected[4] = 1'bX;
end 
// expected y1[ 3 ]
initial
begin
	y1_expected[3] = 1'bX;
end 
// expected y1[ 2 ]
initial
begin
	y1_expected[2] = 1'bX;
end 
// expected y1[ 1 ]
initial
begin
	y1_expected[1] = 1'bX;
end 
// expected y1[ 0 ]
initial
begin
	y1_expected[0] = 1'bX;
end 
// expected y2[ 7 ]
initial
begin
	y2_expected[7] = 1'bX;
end 
// expected y2[ 6 ]
initial
begin
	y2_expected[6] = 1'bX;
end 
// expected y2[ 5 ]
initial
begin
	y2_expected[5] = 1'bX;
end 
// expected y2[ 4 ]
initial
begin
	y2_expected[4] = 1'bX;
end 
// expected y2[ 3 ]
initial
begin
	y2_expected[3] = 1'bX;
end 
// expected y2[ 2 ]
initial
begin
	y2_expected[2] = 1'bX;
end 
// expected y2[ 1 ]
initial
begin
	y2_expected[1] = 1'bX;
end 
// expected y2[ 0 ]
initial
begin
	y2_expected[0] = 1'bX;
end 
// expected y3[ 7 ]
initial
begin
	y3_expected[7] = 1'bX;
end 
// expected y3[ 6 ]
initial
begin
	y3_expected[6] = 1'bX;
end 
// expected y3[ 5 ]
initial
begin
	y3_expected[5] = 1'bX;
end 
// expected y3[ 4 ]
initial
begin
	y3_expected[4] = 1'bX;
end 
// expected y3[ 3 ]
initial
begin
	y3_expected[3] = 1'bX;
end 
// expected y3[ 2 ]
initial
begin
	y3_expected[2] = 1'bX;
end 
// expected y3[ 1 ]
initial
begin
	y3_expected[1] = 1'bX;
end 
// expected y3[ 0 ]
initial
begin
	y3_expected[0] = 1'bX;
end 
// expected y4[ 7 ]
initial
begin
	y4_expected[7] = 1'bX;
end 
// expected y4[ 6 ]
initial
begin
	y4_expected[6] = 1'bX;
end 
// expected y4[ 5 ]
initial
begin
	y4_expected[5] = 1'bX;
end 
// expected y4[ 4 ]
initial
begin
	y4_expected[4] = 1'bX;
end 
// expected y4[ 3 ]
initial
begin
	y4_expected[3] = 1'bX;
end 
// expected y4[ 2 ]
initial
begin
	y4_expected[2] = 1'bX;
end 
// expected y4[ 1 ]
initial
begin
	y4_expected[1] = 1'bX;
end 
// expected y4[ 0 ]
initial
begin
	y4_expected[0] = 1'bX;
end 
// expected y5[ 7 ]
initial
begin
	y5_expected[7] = 1'bX;
end 
// expected y5[ 6 ]
initial
begin
	y5_expected[6] = 1'bX;
end 
// expected y5[ 5 ]
initial
begin
	y5_expected[5] = 1'bX;
end 
// expected y5[ 4 ]
initial
begin
	y5_expected[4] = 1'bX;
end 
// expected y5[ 3 ]
initial
begin
	y5_expected[3] = 1'bX;
end 
// expected y5[ 2 ]
initial
begin
	y5_expected[2] = 1'bX;
end 
// expected y5[ 1 ]
initial
begin
	y5_expected[1] = 1'bX;
end 
// expected y5[ 0 ]
initial
begin
	y5_expected[0] = 1'bX;
end 
// expected y6[ 7 ]
initial
begin
	y6_expected[7] = 1'bX;
end 
// expected y6[ 6 ]
initial
begin
	y6_expected[6] = 1'bX;
end 
// expected y6[ 5 ]
initial
begin
	y6_expected[5] = 1'bX;
end 
// expected y6[ 4 ]
initial
begin
	y6_expected[4] = 1'bX;
end 
// expected y6[ 3 ]
initial
begin
	y6_expected[3] = 1'bX;
end 
// expected y6[ 2 ]
initial
begin
	y6_expected[2] = 1'bX;
end 
// expected y6[ 1 ]
initial
begin
	y6_expected[1] = 1'bX;
end 
// expected y6[ 0 ]
initial
begin
	y6_expected[0] = 1'bX;
end 
// expected y7[ 7 ]
initial
begin
	y7_expected[7] = 1'bX;
end 
// expected y7[ 6 ]
initial
begin
	y7_expected[6] = 1'bX;
end 
// expected y7[ 5 ]
initial
begin
	y7_expected[5] = 1'bX;
end 
// expected y7[ 4 ]
initial
begin
	y7_expected[4] = 1'bX;
end 
// expected y7[ 3 ]
initial
begin
	y7_expected[3] = 1'bX;
end 
// expected y7[ 2 ]
initial
begin
	y7_expected[2] = 1'bX;
end 
// expected y7[ 1 ]
initial
begin
	y7_expected[1] = 1'bX;
end 
// expected y7[ 0 ]
initial
begin
	y7_expected[0] = 1'bX;
end 
// generate trigger
always @(y0_expected or y0 or y1_expected or y1 or y2_expected or y2 or y3_expected or y3 or y4_expected or y4 or y5_expected or y5 or y6_expected or y6 or y7_expected or y7)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected y0 = %b | expected y1 = %b | expected y2 = %b | expected y3 = %b | expected y4 = %b | expected y5 = %b | expected y6 = %b | expected y7 = %b | ",y0_expected_prev,y1_expected_prev,y2_expected_prev,y3_expected_prev,y4_expected_prev,y5_expected_prev,y6_expected_prev,y7_expected_prev);
	$display("| real y0 = %b | real y1 = %b | real y2 = %b | real y3 = %b | real y4 = %b | real y5 = %b | real y6 = %b | real y7 = %b | ",y0_prev,y1_prev,y2_prev,y3_prev,y4_prev,y5_prev,y6_prev,y7_prev);
`endif
	if (
		( y0_expected_prev[0] !== 1'bx ) && ( y0_prev[0] !== y0_expected_prev[0] )
		&& ((y0_expected_prev[0] !== last_y0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[0] = y0_expected_prev[0];
	end
	if (
		( y0_expected_prev[1] !== 1'bx ) && ( y0_prev[1] !== y0_expected_prev[1] )
		&& ((y0_expected_prev[1] !== last_y0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[1] = y0_expected_prev[1];
	end
	if (
		( y0_expected_prev[2] !== 1'bx ) && ( y0_prev[2] !== y0_expected_prev[2] )
		&& ((y0_expected_prev[2] !== last_y0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[2] = y0_expected_prev[2];
	end
	if (
		( y0_expected_prev[3] !== 1'bx ) && ( y0_prev[3] !== y0_expected_prev[3] )
		&& ((y0_expected_prev[3] !== last_y0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[3] = y0_expected_prev[3];
	end
	if (
		( y0_expected_prev[4] !== 1'bx ) && ( y0_prev[4] !== y0_expected_prev[4] )
		&& ((y0_expected_prev[4] !== last_y0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[4] = y0_expected_prev[4];
	end
	if (
		( y0_expected_prev[5] !== 1'bx ) && ( y0_prev[5] !== y0_expected_prev[5] )
		&& ((y0_expected_prev[5] !== last_y0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[5] = y0_expected_prev[5];
	end
	if (
		( y0_expected_prev[6] !== 1'bx ) && ( y0_prev[6] !== y0_expected_prev[6] )
		&& ((y0_expected_prev[6] !== last_y0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[6] = y0_expected_prev[6];
	end
	if (
		( y0_expected_prev[7] !== 1'bx ) && ( y0_prev[7] !== y0_expected_prev[7] )
		&& ((y0_expected_prev[7] !== last_y0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y0_expected_prev);
		$display ("     Real value = %b", y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y0_exp[7] = y0_expected_prev[7];
	end
	if (
		( y1_expected_prev[0] !== 1'bx ) && ( y1_prev[0] !== y1_expected_prev[0] )
		&& ((y1_expected_prev[0] !== last_y1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[0] = y1_expected_prev[0];
	end
	if (
		( y1_expected_prev[1] !== 1'bx ) && ( y1_prev[1] !== y1_expected_prev[1] )
		&& ((y1_expected_prev[1] !== last_y1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[1] = y1_expected_prev[1];
	end
	if (
		( y1_expected_prev[2] !== 1'bx ) && ( y1_prev[2] !== y1_expected_prev[2] )
		&& ((y1_expected_prev[2] !== last_y1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[2] = y1_expected_prev[2];
	end
	if (
		( y1_expected_prev[3] !== 1'bx ) && ( y1_prev[3] !== y1_expected_prev[3] )
		&& ((y1_expected_prev[3] !== last_y1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[3] = y1_expected_prev[3];
	end
	if (
		( y1_expected_prev[4] !== 1'bx ) && ( y1_prev[4] !== y1_expected_prev[4] )
		&& ((y1_expected_prev[4] !== last_y1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[4] = y1_expected_prev[4];
	end
	if (
		( y1_expected_prev[5] !== 1'bx ) && ( y1_prev[5] !== y1_expected_prev[5] )
		&& ((y1_expected_prev[5] !== last_y1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[5] = y1_expected_prev[5];
	end
	if (
		( y1_expected_prev[6] !== 1'bx ) && ( y1_prev[6] !== y1_expected_prev[6] )
		&& ((y1_expected_prev[6] !== last_y1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[6] = y1_expected_prev[6];
	end
	if (
		( y1_expected_prev[7] !== 1'bx ) && ( y1_prev[7] !== y1_expected_prev[7] )
		&& ((y1_expected_prev[7] !== last_y1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_y1_exp[7] = y1_expected_prev[7];
	end
	if (
		( y2_expected_prev[0] !== 1'bx ) && ( y2_prev[0] !== y2_expected_prev[0] )
		&& ((y2_expected_prev[0] !== last_y2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[0] = y2_expected_prev[0];
	end
	if (
		( y2_expected_prev[1] !== 1'bx ) && ( y2_prev[1] !== y2_expected_prev[1] )
		&& ((y2_expected_prev[1] !== last_y2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[1] = y2_expected_prev[1];
	end
	if (
		( y2_expected_prev[2] !== 1'bx ) && ( y2_prev[2] !== y2_expected_prev[2] )
		&& ((y2_expected_prev[2] !== last_y2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[2] = y2_expected_prev[2];
	end
	if (
		( y2_expected_prev[3] !== 1'bx ) && ( y2_prev[3] !== y2_expected_prev[3] )
		&& ((y2_expected_prev[3] !== last_y2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[3] = y2_expected_prev[3];
	end
	if (
		( y2_expected_prev[4] !== 1'bx ) && ( y2_prev[4] !== y2_expected_prev[4] )
		&& ((y2_expected_prev[4] !== last_y2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[4] = y2_expected_prev[4];
	end
	if (
		( y2_expected_prev[5] !== 1'bx ) && ( y2_prev[5] !== y2_expected_prev[5] )
		&& ((y2_expected_prev[5] !== last_y2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[5] = y2_expected_prev[5];
	end
	if (
		( y2_expected_prev[6] !== 1'bx ) && ( y2_prev[6] !== y2_expected_prev[6] )
		&& ((y2_expected_prev[6] !== last_y2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[6] = y2_expected_prev[6];
	end
	if (
		( y2_expected_prev[7] !== 1'bx ) && ( y2_prev[7] !== y2_expected_prev[7] )
		&& ((y2_expected_prev[7] !== last_y2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y2_exp[7] = y2_expected_prev[7];
	end
	if (
		( y3_expected_prev[0] !== 1'bx ) && ( y3_prev[0] !== y3_expected_prev[0] )
		&& ((y3_expected_prev[0] !== last_y3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[0] = y3_expected_prev[0];
	end
	if (
		( y3_expected_prev[1] !== 1'bx ) && ( y3_prev[1] !== y3_expected_prev[1] )
		&& ((y3_expected_prev[1] !== last_y3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[1] = y3_expected_prev[1];
	end
	if (
		( y3_expected_prev[2] !== 1'bx ) && ( y3_prev[2] !== y3_expected_prev[2] )
		&& ((y3_expected_prev[2] !== last_y3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[2] = y3_expected_prev[2];
	end
	if (
		( y3_expected_prev[3] !== 1'bx ) && ( y3_prev[3] !== y3_expected_prev[3] )
		&& ((y3_expected_prev[3] !== last_y3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[3] = y3_expected_prev[3];
	end
	if (
		( y3_expected_prev[4] !== 1'bx ) && ( y3_prev[4] !== y3_expected_prev[4] )
		&& ((y3_expected_prev[4] !== last_y3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[4] = y3_expected_prev[4];
	end
	if (
		( y3_expected_prev[5] !== 1'bx ) && ( y3_prev[5] !== y3_expected_prev[5] )
		&& ((y3_expected_prev[5] !== last_y3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[5] = y3_expected_prev[5];
	end
	if (
		( y3_expected_prev[6] !== 1'bx ) && ( y3_prev[6] !== y3_expected_prev[6] )
		&& ((y3_expected_prev[6] !== last_y3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[6] = y3_expected_prev[6];
	end
	if (
		( y3_expected_prev[7] !== 1'bx ) && ( y3_prev[7] !== y3_expected_prev[7] )
		&& ((y3_expected_prev[7] !== last_y3_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_y3_exp[7] = y3_expected_prev[7];
	end
	if (
		( y4_expected_prev[0] !== 1'bx ) && ( y4_prev[0] !== y4_expected_prev[0] )
		&& ((y4_expected_prev[0] !== last_y4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y4_expected_prev);
		$display ("     Real value = %b", y4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_y4_exp[0] = y4_expected_prev[0];
	end
	if (
		( y4_expected_prev[1] !== 1'bx ) && ( y4_prev[1] !== y4_expected_prev[1] )
		&& ((y4_expected_prev[1] !== last_y4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y4_expected_prev);
		$display ("     Real value = %b", y4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_y4_exp[1] = y4_expected_prev[1];
	end
	if (
		( y4_expected_prev[2] !== 1'bx ) && ( y4_prev[2] !== y4_expected_prev[2] )
		&& ((y4_expected_prev[2] !== last_y4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y4_expected_prev);
		$display ("     Real value = %b", y4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_y4_exp[2] = y4_expected_prev[2];
	end
	if (
		( y4_expected_prev[3] !== 1'bx ) && ( y4_prev[3] !== y4_expected_prev[3] )
		&& ((y4_expected_prev[3] !== last_y4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y4_expected_prev);
		$display ("     Real value = %b", y4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_y4_exp[3] = y4_expected_prev[3];
	end
	if (
		( y4_expected_prev[4] !== 1'bx ) && ( y4_prev[4] !== y4_expected_prev[4] )
		&& ((y4_expected_prev[4] !== last_y4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y4_expected_prev);
		$display ("     Real value = %b", y4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_y4_exp[4] = y4_expected_prev[4];
	end
	if (
		( y4_expected_prev[5] !== 1'bx ) && ( y4_prev[5] !== y4_expected_prev[5] )
		&& ((y4_expected_prev[5] !== last_y4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y4_expected_prev);
		$display ("     Real value = %b", y4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_y4_exp[5] = y4_expected_prev[5];
	end
	if (
		( y4_expected_prev[6] !== 1'bx ) && ( y4_prev[6] !== y4_expected_prev[6] )
		&& ((y4_expected_prev[6] !== last_y4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y4_expected_prev);
		$display ("     Real value = %b", y4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_y4_exp[6] = y4_expected_prev[6];
	end
	if (
		( y4_expected_prev[7] !== 1'bx ) && ( y4_prev[7] !== y4_expected_prev[7] )
		&& ((y4_expected_prev[7] !== last_y4_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y4_expected_prev);
		$display ("     Real value = %b", y4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_y4_exp[7] = y4_expected_prev[7];
	end
	if (
		( y5_expected_prev[0] !== 1'bx ) && ( y5_prev[0] !== y5_expected_prev[0] )
		&& ((y5_expected_prev[0] !== last_y5_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y5_expected_prev);
		$display ("     Real value = %b", y5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y5_exp[0] = y5_expected_prev[0];
	end
	if (
		( y5_expected_prev[1] !== 1'bx ) && ( y5_prev[1] !== y5_expected_prev[1] )
		&& ((y5_expected_prev[1] !== last_y5_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y5_expected_prev);
		$display ("     Real value = %b", y5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y5_exp[1] = y5_expected_prev[1];
	end
	if (
		( y5_expected_prev[2] !== 1'bx ) && ( y5_prev[2] !== y5_expected_prev[2] )
		&& ((y5_expected_prev[2] !== last_y5_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y5_expected_prev);
		$display ("     Real value = %b", y5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y5_exp[2] = y5_expected_prev[2];
	end
	if (
		( y5_expected_prev[3] !== 1'bx ) && ( y5_prev[3] !== y5_expected_prev[3] )
		&& ((y5_expected_prev[3] !== last_y5_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y5_expected_prev);
		$display ("     Real value = %b", y5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y5_exp[3] = y5_expected_prev[3];
	end
	if (
		( y5_expected_prev[4] !== 1'bx ) && ( y5_prev[4] !== y5_expected_prev[4] )
		&& ((y5_expected_prev[4] !== last_y5_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y5_expected_prev);
		$display ("     Real value = %b", y5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y5_exp[4] = y5_expected_prev[4];
	end
	if (
		( y5_expected_prev[5] !== 1'bx ) && ( y5_prev[5] !== y5_expected_prev[5] )
		&& ((y5_expected_prev[5] !== last_y5_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y5_expected_prev);
		$display ("     Real value = %b", y5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y5_exp[5] = y5_expected_prev[5];
	end
	if (
		( y5_expected_prev[6] !== 1'bx ) && ( y5_prev[6] !== y5_expected_prev[6] )
		&& ((y5_expected_prev[6] !== last_y5_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y5_expected_prev);
		$display ("     Real value = %b", y5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y5_exp[6] = y5_expected_prev[6];
	end
	if (
		( y5_expected_prev[7] !== 1'bx ) && ( y5_prev[7] !== y5_expected_prev[7] )
		&& ((y5_expected_prev[7] !== last_y5_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y5_expected_prev);
		$display ("     Real value = %b", y5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y5_exp[7] = y5_expected_prev[7];
	end
	if (
		( y6_expected_prev[0] !== 1'bx ) && ( y6_prev[0] !== y6_expected_prev[0] )
		&& ((y6_expected_prev[0] !== last_y6_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y6_expected_prev);
		$display ("     Real value = %b", y6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_y6_exp[0] = y6_expected_prev[0];
	end
	if (
		( y6_expected_prev[1] !== 1'bx ) && ( y6_prev[1] !== y6_expected_prev[1] )
		&& ((y6_expected_prev[1] !== last_y6_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y6_expected_prev);
		$display ("     Real value = %b", y6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_y6_exp[1] = y6_expected_prev[1];
	end
	if (
		( y6_expected_prev[2] !== 1'bx ) && ( y6_prev[2] !== y6_expected_prev[2] )
		&& ((y6_expected_prev[2] !== last_y6_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y6_expected_prev);
		$display ("     Real value = %b", y6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_y6_exp[2] = y6_expected_prev[2];
	end
	if (
		( y6_expected_prev[3] !== 1'bx ) && ( y6_prev[3] !== y6_expected_prev[3] )
		&& ((y6_expected_prev[3] !== last_y6_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y6_expected_prev);
		$display ("     Real value = %b", y6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_y6_exp[3] = y6_expected_prev[3];
	end
	if (
		( y6_expected_prev[4] !== 1'bx ) && ( y6_prev[4] !== y6_expected_prev[4] )
		&& ((y6_expected_prev[4] !== last_y6_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y6_expected_prev);
		$display ("     Real value = %b", y6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_y6_exp[4] = y6_expected_prev[4];
	end
	if (
		( y6_expected_prev[5] !== 1'bx ) && ( y6_prev[5] !== y6_expected_prev[5] )
		&& ((y6_expected_prev[5] !== last_y6_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y6_expected_prev);
		$display ("     Real value = %b", y6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_y6_exp[5] = y6_expected_prev[5];
	end
	if (
		( y6_expected_prev[6] !== 1'bx ) && ( y6_prev[6] !== y6_expected_prev[6] )
		&& ((y6_expected_prev[6] !== last_y6_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y6_expected_prev);
		$display ("     Real value = %b", y6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_y6_exp[6] = y6_expected_prev[6];
	end
	if (
		( y6_expected_prev[7] !== 1'bx ) && ( y6_prev[7] !== y6_expected_prev[7] )
		&& ((y6_expected_prev[7] !== last_y6_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y6[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y6_expected_prev);
		$display ("     Real value = %b", y6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_y6_exp[7] = y6_expected_prev[7];
	end
	if (
		( y7_expected_prev[0] !== 1'bx ) && ( y7_prev[0] !== y7_expected_prev[0] )
		&& ((y7_expected_prev[0] !== last_y7_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y7_expected_prev);
		$display ("     Real value = %b", y7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_y7_exp[0] = y7_expected_prev[0];
	end
	if (
		( y7_expected_prev[1] !== 1'bx ) && ( y7_prev[1] !== y7_expected_prev[1] )
		&& ((y7_expected_prev[1] !== last_y7_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y7_expected_prev);
		$display ("     Real value = %b", y7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_y7_exp[1] = y7_expected_prev[1];
	end
	if (
		( y7_expected_prev[2] !== 1'bx ) && ( y7_prev[2] !== y7_expected_prev[2] )
		&& ((y7_expected_prev[2] !== last_y7_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y7_expected_prev);
		$display ("     Real value = %b", y7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_y7_exp[2] = y7_expected_prev[2];
	end
	if (
		( y7_expected_prev[3] !== 1'bx ) && ( y7_prev[3] !== y7_expected_prev[3] )
		&& ((y7_expected_prev[3] !== last_y7_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y7_expected_prev);
		$display ("     Real value = %b", y7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_y7_exp[3] = y7_expected_prev[3];
	end
	if (
		( y7_expected_prev[4] !== 1'bx ) && ( y7_prev[4] !== y7_expected_prev[4] )
		&& ((y7_expected_prev[4] !== last_y7_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y7_expected_prev);
		$display ("     Real value = %b", y7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_y7_exp[4] = y7_expected_prev[4];
	end
	if (
		( y7_expected_prev[5] !== 1'bx ) && ( y7_prev[5] !== y7_expected_prev[5] )
		&& ((y7_expected_prev[5] !== last_y7_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y7_expected_prev);
		$display ("     Real value = %b", y7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_y7_exp[5] = y7_expected_prev[5];
	end
	if (
		( y7_expected_prev[6] !== 1'bx ) && ( y7_prev[6] !== y7_expected_prev[6] )
		&& ((y7_expected_prev[6] !== last_y7_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y7_expected_prev);
		$display ("     Real value = %b", y7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_y7_exp[6] = y7_expected_prev[6];
	end
	if (
		( y7_expected_prev[7] !== 1'bx ) && ( y7_prev[7] !== y7_expected_prev[7] )
		&& ((y7_expected_prev[7] !== last_y7_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y7[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y7_expected_prev);
		$display ("     Real value = %b", y7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_y7_exp[7] = y7_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module bus_dmx_1_8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] addr;
reg [7:0] x;
// wires                                               
wire [7:0] y0;
wire [7:0] y1;
wire [7:0] y2;
wire [7:0] y3;
wire [7:0] y4;
wire [7:0] y5;
wire [7:0] y6;
wire [7:0] y7;

wire sampler;                             

// assign statements (if any)                          
bus_dmx_1_8 i1 (
// port map - connection between master ports and signals/registers   
	.addr(addr),
	.x(x),
	.y0(y0),
	.y1(y1),
	.y2(y2),
	.y3(y3),
	.y4(y4),
	.y5(y5),
	.y6(y6),
	.y7(y7)
);
// addr[ 2 ]
initial
begin
	addr[2] = 1'b0;
	addr[2] = #110000 1'b1;
	addr[2] = #110000 1'b0;
	addr[2] = #55000 1'b1;
	addr[2] = #165000 1'b0;
	addr[2] = #55000 1'b1;
	addr[2] = #165000 1'b0;
	addr[2] = #55000 1'b1;
	addr[2] = #220000 1'b0;
end 
// addr[ 1 ]
initial
begin
	addr[1] = 1'b1;
	addr[1] = #220000 1'b0;
	addr[1] = #165000 1'b1;
	addr[1] = #55000 1'b0;
	addr[1] = #550000 1'b1;
end 
// addr[ 0 ]
initial
begin
	addr[0] = 1'b1;
	addr[0] = #55000 1'b0;
	addr[0] = #55000 1'b1;
	addr[0] = #55000 1'b0;
	addr[0] = #110000 1'b1;
	addr[0] = #55000 1'b0;
	addr[0] = #110000 1'b1;
	addr[0] = #55000 1'b0;
	addr[0] = #110000 1'b1;
	addr[0] = #55000 1'b0;
	addr[0] = #55000 1'b1;
	addr[0] = #110000 1'b0;
	addr[0] = #55000 1'b1;
	addr[0] = #55000 1'b0;
	addr[0] = #55000 1'b1;
end 
// x[ 7 ]
initial
begin
	x[7] = 1'b0;
	x[7] = #20000 1'b1;
	x[7] = #60000 1'b0;
	x[7] = #60000 1'b1;
	x[7] = #20000 1'b0;
	x[7] = #40000 1'b1;
	x[7] = #40000 1'b0;
	x[7] = #20000 1'b1;
	x[7] = #40000 1'b0;
	x[7] = #40000 1'b1;
	x[7] = #40000 1'b0;
	x[7] = #20000 1'b1;
	x[7] = #100000 1'b0;
	x[7] = #140000 1'b1;
	x[7] = #20000 1'b0;
	x[7] = #20000 1'b1;
	x[7] = #20000 1'b0;
	x[7] = #20000 1'b1;
	x[7] = #40000 1'b0;
	x[7] = #20000 1'b1;
	x[7] = #40000 1'b0;
	x[7] = #20000 1'b1;
	x[7] = #40000 1'b0;
	x[7] = #40000 1'b1;
	x[7] = #20000 1'b0;
	x[7] = #20000 1'b1;
	x[7] = #20000 1'b0;
end 
// x[ 6 ]
initial
begin
	x[6] = 1'b1;
	x[6] = #20000 1'b0;
	x[6] = #60000 1'b1;
	x[6] = #20000 1'b0;
	x[6] = #40000 1'b1;
	x[6] = #20000 1'b0;
	x[6] = #40000 1'b1;
	x[6] = #20000 1'b0;
	x[6] = #60000 1'b1;
	x[6] = #20000 1'b0;
	x[6] = #20000 1'b1;
	x[6] = #40000 1'b0;
	x[6] = #120000 1'b1;
	x[6] = #40000 1'b0;
	x[6] = #20000 1'b1;
	x[6] = #180000 1'b0;
	x[6] = #20000 1'b1;
	x[6] = #20000 1'b0;
	x[6] = #20000 1'b1;
	x[6] = #60000 1'b0;
	x[6] = #40000 1'b1;
	x[6] = #20000 1'b0;
	x[6] = #40000 1'b1;
end 
// x[ 5 ]
initial
begin
	x[5] = 1'b1;
	x[5] = #60000 1'b0;
	x[5] = #20000 1'b1;
	x[5] = #40000 1'b0;
	x[5] = #20000 1'b1;
	x[5] = #20000 1'b0;
	x[5] = #40000 1'b1;
	x[5] = #60000 1'b0;
	x[5] = #100000 1'b1;
	x[5] = #60000 1'b0;
	x[5] = #20000 1'b1;
	x[5] = #20000 1'b0;
	x[5] = #20000 1'b1;
	x[5] = #20000 1'b0;
	x[5] = #40000 1'b1;
	x[5] = #60000 1'b0;
	x[5] = #80000 1'b1;
	x[5] = #60000 1'b0;
	x[5] = #20000 1'b1;
	x[5] = #20000 1'b0;
	x[5] = #60000 1'b1;
	x[5] = #20000 1'b0;
	x[5] = #20000 1'b1;
	x[5] = #60000 1'b0;
	x[5] = #20000 1'b1;
end 
// x[ 4 ]
initial
begin
	x[4] = 1'b1;
	x[4] = #20000 1'b0;
	x[4] = #220000 1'b1;
	x[4] = #20000 1'b0;
	x[4] = #20000 1'b1;
	x[4] = #100000 1'b0;
	x[4] = #20000 1'b1;
	x[4] = #40000 1'b0;
	x[4] = #20000 1'b1;
	x[4] = #20000 1'b0;
	x[4] = #20000 1'b1;
	x[4] = #20000 1'b0;
	x[4] = #20000 1'b1;
	x[4] = #20000 1'b0;
	x[4] = #20000 1'b1;
	x[4] = #20000 1'b0;
	x[4] = #60000 1'b1;
	x[4] = #40000 1'b0;
	x[4] = #20000 1'b1;
	x[4] = #80000 1'b0;
	x[4] = #20000 1'b1;
	x[4] = #20000 1'b0;
	x[4] = #20000 1'b1;
	x[4] = #40000 1'b0;
	x[4] = #20000 1'b1;
	x[4] = #20000 1'b0;
	x[4] = #40000 1'b1;
end 
// x[ 3 ]
initial
begin
	x[3] = 1'b1;
	x[3] = #60000 1'b0;
	x[3] = #40000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #20000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #60000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #40000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #20000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #40000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #40000 1'b1;
	x[3] = #40000 1'b0;
	x[3] = #20000 1'b1;
	x[3] = #60000 1'b0;
	x[3] = #40000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #120000 1'b1;
	x[3] = #20000 1'b0;
	x[3] = #20000 1'b1;
	x[3] = #140000 1'b0;
	x[3] = #40000 1'b1;
	x[3] = #20000 1'b0;
end 
// x[ 2 ]
initial
begin
	x[2] = 1'b0;
	x[2] = #20000 1'b1;
	x[2] = #100000 1'b0;
	x[2] = #20000 1'b1;
	x[2] = #20000 1'b0;
	x[2] = #20000 1'b1;
	x[2] = #20000 1'b0;
	x[2] = #40000 1'b1;
	x[2] = #40000 1'b0;
	x[2] = #20000 1'b1;
	x[2] = #60000 1'b0;
	x[2] = #20000 1'b1;
	x[2] = #80000 1'b0;
	x[2] = #60000 1'b1;
	x[2] = #60000 1'b0;
	x[2] = #20000 1'b1;
	x[2] = #40000 1'b0;
	x[2] = #80000 1'b1;
	x[2] = #40000 1'b0;
	x[2] = #40000 1'b1;
	x[2] = #60000 1'b0;
	x[2] = #60000 1'b1;
	x[2] = #20000 1'b0;
end 
// x[ 1 ]
initial
begin
	x[1] = 1'b0;
	x[1] = #20000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #20000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #20000 1'b1;
	x[1] = #40000 1'b0;
	x[1] = #40000 1'b1;
	x[1] = #40000 1'b0;
	x[1] = #20000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #40000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #20000 1'b1;
	x[1] = #40000 1'b0;
	x[1] = #40000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #40000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #20000 1'b1;
	x[1] = #40000 1'b0;
	x[1] = #80000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #80000 1'b1;
	x[1] = #20000 1'b0;
	x[1] = #80000 1'b1;
	x[1] = #40000 1'b0;
	x[1] = #20000 1'b1;
	x[1] = #40000 1'b0;
	x[1] = #20000 1'b1;
end 
// x[ 0 ]
initial
begin
	x[0] = 1'b0;
	x[0] = #20000 1'b1;
	x[0] = #20000 1'b0;
	x[0] = #20000 1'b1;
	x[0] = #20000 1'b0;
	x[0] = #100000 1'b1;
	x[0] = #60000 1'b0;
	x[0] = #40000 1'b1;
	x[0] = #20000 1'b0;
	x[0] = #20000 1'b1;
	x[0] = #60000 1'b0;
	x[0] = #20000 1'b1;
	x[0] = #60000 1'b0;
	x[0] = #60000 1'b1;
	x[0] = #20000 1'b0;
	x[0] = #20000 1'b1;
	x[0] = #40000 1'b0;
	x[0] = #20000 1'b1;
	x[0] = #20000 1'b0;
	x[0] = #40000 1'b1;
	x[0] = #60000 1'b0;
	x[0] = #40000 1'b1;
	x[0] = #20000 1'b0;
	x[0] = #20000 1'b1;
	x[0] = #80000 1'b0;
	x[0] = #40000 1'b1;
	x[0] = #20000 1'b0;
	x[0] = #20000 1'b1;
end 

bus_dmx_1_8_vlg_sample_tst tb_sample (
	.addr(addr),
	.x(x),
	.sampler_tx(sampler)
);

bus_dmx_1_8_vlg_check_tst tb_out(
	.y0(y0),
	.y1(y1),
	.y2(y2),
	.y3(y3),
	.y4(y4),
	.y5(y5),
	.y6(y6),
	.y7(y7),
	.sampler_rx(sampler)
);
endmodule

