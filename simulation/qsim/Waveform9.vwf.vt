// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/10/2024 18:47:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cd_8_3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cd_8_3_vlg_sample_tst(
	mng,
	sampler_tx
);
input [7:0] mng;
output sampler_tx;

reg sample;
time current_time;
always @(mng)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cd_8_3_vlg_check_tst (
	addr,
	sampler_rx
);
input [3:0] addr;
input sampler_rx;

reg [3:0] addr_expected;

reg [3:0] addr_prev;

reg [3:0] addr_expected_prev;

reg [3:0] last_addr_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	addr_prev = addr;
end

// update expected /o prevs

always @(trigger)
begin
	addr_expected_prev = addr_expected;
end


// expected addr[ 3 ]
initial
begin
	addr_expected[3] = 1'bX;
end 
// expected addr[ 2 ]
initial
begin
	addr_expected[2] = 1'bX;
end 
// expected addr[ 1 ]
initial
begin
	addr_expected[1] = 1'bX;
end 
// expected addr[ 0 ]
initial
begin
	addr_expected[0] = 1'bX;
end 
// generate trigger
always @(addr_expected or addr)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected addr = %b | ",addr_expected_prev);
	$display("| real addr = %b | ",addr_prev);
`endif
	if (
		( addr_expected_prev[0] !== 1'bx ) && ( addr_prev[0] !== addr_expected_prev[0] )
		&& ((addr_expected_prev[0] !== last_addr_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[0] = addr_expected_prev[0];
	end
	if (
		( addr_expected_prev[1] !== 1'bx ) && ( addr_prev[1] !== addr_expected_prev[1] )
		&& ((addr_expected_prev[1] !== last_addr_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[1] = addr_expected_prev[1];
	end
	if (
		( addr_expected_prev[2] !== 1'bx ) && ( addr_prev[2] !== addr_expected_prev[2] )
		&& ((addr_expected_prev[2] !== last_addr_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[2] = addr_expected_prev[2];
	end
	if (
		( addr_expected_prev[3] !== 1'bx ) && ( addr_prev[3] !== addr_expected_prev[3] )
		&& ((addr_expected_prev[3] !== last_addr_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addr_expected_prev);
		$display ("     Real value = %b", addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addr_exp[3] = addr_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cd_8_3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] mng;
// wires                                               
wire [3:0] addr;

wire sampler;                             

// assign statements (if any)                          
cd_8_3 i1 (
// port map - connection between master ports and signals/registers   
	.addr(addr),
	.mng(mng)
);
// mng[ 7 ]
initial
begin
	mng[7] = 1'b0;
	mng[7] = #90000 1'b1;
	mng[7] = #15000 1'b0;
	mng[7] = #25000 1'b1;
	mng[7] = #10000 1'b0;
end 
// mng[ 6 ]
initial
begin
	mng[6] = 1'b0;
end 
// mng[ 5 ]
initial
begin
	mng[5] = 1'b0;
	mng[5] = #140000 1'b1;
	mng[5] = #5000 1'b0;
end 
// mng[ 4 ]
initial
begin
	mng[4] = 1'b0;
	mng[4] = #15000 1'b1;
	mng[4] = #70000 1'b0;
end 
// mng[ 3 ]
initial
begin
	mng[3] = 1'b0;
	mng[3] = #140000 1'b1;
	mng[3] = #5000 1'b0;
end 
// mng[ 2 ]
initial
begin
	mng[2] = 1'b1;
	mng[2] = #15000 1'b0;
	mng[2] = #100000 1'b1;
	mng[2] = #15000 1'b0;
end 
// mng[ 1 ]
initial
begin
	mng[1] = 1'b0;
	mng[1] = #110000 1'b1;
	mng[1] = #5000 1'b0;
end 
// mng[ 0 ]
initial
begin
	mng[0] = 1'b0;
	mng[0] = #105000 1'b1;
	mng[0] = #5000 1'b0;
end 

cd_8_3_vlg_sample_tst tb_sample (
	.mng(mng),
	.sampler_tx(sampler)
);

cd_8_3_vlg_check_tst tb_out(
	.addr(addr),
	.sampler_rx(sampler)
);
endmodule

