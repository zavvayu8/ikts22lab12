// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/14/2024 15:03:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    wrapper_add4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module wrapper_add4_vlg_sample_tst(
	a,
	b,
	c,
	sampler_tx
);
input [3:0] a;
input [3:0] b;
input  c;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or c)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module wrapper_add4_vlg_check_tst (
	CO,
	HEXO,
	sampler_rx
);
input  CO;
input [6:0] HEXO;
input sampler_rx;

reg  CO_expected;
reg [6:0] HEXO_expected;

reg  CO_prev;
reg [6:0] HEXO_prev;

reg  CO_expected_prev;
reg [6:0] HEXO_expected_prev;

reg  last_CO_exp;
reg [6:0] last_HEXO_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	CO_prev = CO;
	HEXO_prev = HEXO;
end

// update expected /o prevs

always @(trigger)
begin
	CO_expected_prev = CO_expected;
	HEXO_expected_prev = HEXO_expected;
end



// expected CO
initial
begin
	CO_expected = 1'bX;
end 
// expected HEXO[ 6 ]
initial
begin
	HEXO_expected[6] = 1'bX;
end 
// expected HEXO[ 5 ]
initial
begin
	HEXO_expected[5] = 1'bX;
end 
// expected HEXO[ 4 ]
initial
begin
	HEXO_expected[4] = 1'bX;
end 
// expected HEXO[ 3 ]
initial
begin
	HEXO_expected[3] = 1'bX;
end 
// expected HEXO[ 2 ]
initial
begin
	HEXO_expected[2] = 1'bX;
end 
// expected HEXO[ 1 ]
initial
begin
	HEXO_expected[1] = 1'bX;
end 
// expected HEXO[ 0 ]
initial
begin
	HEXO_expected[0] = 1'bX;
end 
// generate trigger
always @(CO_expected or CO or HEXO_expected or HEXO)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CO = %b | expected HEXO = %b | ",CO_expected_prev,HEXO_expected_prev);
	$display("| real CO = %b | real HEXO = %b | ",CO_prev,HEXO_prev);
`endif
	if (
		( CO_expected_prev !== 1'bx ) && ( CO_prev !== CO_expected_prev )
		&& ((CO_expected_prev !== last_CO_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CO_expected_prev);
		$display ("     Real value = %b", CO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CO_exp = CO_expected_prev;
	end
	if (
		( HEXO_expected_prev[0] !== 1'bx ) && ( HEXO_prev[0] !== HEXO_expected_prev[0] )
		&& ((HEXO_expected_prev[0] !== last_HEXO_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEXO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEXO_expected_prev);
		$display ("     Real value = %b", HEXO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEXO_exp[0] = HEXO_expected_prev[0];
	end
	if (
		( HEXO_expected_prev[1] !== 1'bx ) && ( HEXO_prev[1] !== HEXO_expected_prev[1] )
		&& ((HEXO_expected_prev[1] !== last_HEXO_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEXO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEXO_expected_prev);
		$display ("     Real value = %b", HEXO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEXO_exp[1] = HEXO_expected_prev[1];
	end
	if (
		( HEXO_expected_prev[2] !== 1'bx ) && ( HEXO_prev[2] !== HEXO_expected_prev[2] )
		&& ((HEXO_expected_prev[2] !== last_HEXO_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEXO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEXO_expected_prev);
		$display ("     Real value = %b", HEXO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEXO_exp[2] = HEXO_expected_prev[2];
	end
	if (
		( HEXO_expected_prev[3] !== 1'bx ) && ( HEXO_prev[3] !== HEXO_expected_prev[3] )
		&& ((HEXO_expected_prev[3] !== last_HEXO_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEXO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEXO_expected_prev);
		$display ("     Real value = %b", HEXO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEXO_exp[3] = HEXO_expected_prev[3];
	end
	if (
		( HEXO_expected_prev[4] !== 1'bx ) && ( HEXO_prev[4] !== HEXO_expected_prev[4] )
		&& ((HEXO_expected_prev[4] !== last_HEXO_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEXO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEXO_expected_prev);
		$display ("     Real value = %b", HEXO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEXO_exp[4] = HEXO_expected_prev[4];
	end
	if (
		( HEXO_expected_prev[5] !== 1'bx ) && ( HEXO_prev[5] !== HEXO_expected_prev[5] )
		&& ((HEXO_expected_prev[5] !== last_HEXO_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEXO[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEXO_expected_prev);
		$display ("     Real value = %b", HEXO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEXO_exp[5] = HEXO_expected_prev[5];
	end
	if (
		( HEXO_expected_prev[6] !== 1'bx ) && ( HEXO_prev[6] !== HEXO_expected_prev[6] )
		&& ((HEXO_expected_prev[6] !== last_HEXO_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEXO[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEXO_expected_prev);
		$display ("     Real value = %b", HEXO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEXO_exp[6] = HEXO_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module wrapper_add4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] a;
reg [3:0] b;
reg c;
// wires                                               
wire CO;
wire [6:0] HEXO;

wire sampler;                             

// assign statements (if any)                          
wrapper_add4 i1 (
// port map - connection between master ports and signals/registers   
	.CO(CO),
	.HEXO(HEXO),
	.a(a),
	.b(b),
	.c(c)
);
// a[ 3 ]
initial
begin
	a[3] = 1'b1;
	a[3] = #30000 1'b0;
	a[3] = #30000 1'b1;
	a[3] = #45000 1'b0;
	a[3] = #45000 1'b1;
	a[3] = #30000 1'b0;
	a[3] = #15000 1'b1;
	a[3] = #30000 1'b0;
	a[3] = #15000 1'b1;
	a[3] = #45000 1'b0;
	a[3] = #30000 1'b1;
	a[3] = #45000 1'b0;
	a[3] = #30000 1'b1;
	a[3] = #15000 1'b0;
	a[3] = #60000 1'b1;
	a[3] = #60000 1'b0;
	a[3] = #15000 1'b1;
	a[3] = #60000 1'b0;
	a[3] = #30000 1'b1;
	a[3] = #15000 1'b0;
	a[3] = #15000 1'b1;
	a[3] = #30000 1'b0;
	a[3] = #15000 1'b1;
	a[3] = #30000 1'b0;
	a[3] = #30000 1'b1;
	a[3] = #30000 1'b0;
	a[3] = #15000 1'b1;
	a[3] = #30000 1'b0;
	a[3] = #45000 1'b1;
	a[3] = #30000 1'b0;
	a[3] = #15000 1'b1;
	a[3] = #45000 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b1;
	a[2] = #30000 1'b0;
	a[2] = #15000 1'b1;
	a[2] = #15000 1'b0;
	a[2] = #15000 1'b1;
	a[2] = #30000 1'b0;
	a[2] = #15000 1'b1;
	a[2] = #45000 1'b0;
	a[2] = #30000 1'b1;
	a[2] = #30000 1'b0;
	a[2] = #30000 1'b1;
	a[2] = #15000 1'b0;
	a[2] = #15000 1'b1;
	a[2] = #15000 1'b0;
	a[2] = #15000 1'b1;
	a[2] = #60000 1'b0;
	a[2] = #15000 1'b1;
	a[2] = #15000 1'b0;
	a[2] = #15000 1'b1;
	a[2] = #15000 1'b0;
	a[2] = #15000 1'b1;
	a[2] = #45000 1'b0;
	a[2] = #15000 1'b1;
	a[2] = #30000 1'b0;
	a[2] = #60000 1'b1;
	a[2] = #30000 1'b0;
	a[2] = #45000 1'b1;
	a[2] = #15000 1'b0;
	a[2] = #15000 1'b1;
	a[2] = #30000 1'b0;
	a[2] = #15000 1'b1;
	a[2] = #30000 1'b0;
	a[2] = #15000 1'b1;
	a[2] = #30000 1'b0;
	a[2] = #15000 1'b1;
	a[2] = #30000 1'b0;
	a[2] = #45000 1'b1;
	a[2] = #15000 1'b0;
	a[2] = #30000 1'b1;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b1;
	a[1] = #30000 1'b0;
	a[1] = #15000 1'b1;
	a[1] = #30000 1'b0;
	a[1] = #15000 1'b1;
	a[1] = #15000 1'b0;
	a[1] = #60000 1'b1;
	a[1] = #45000 1'b0;
	a[1] = #30000 1'b1;
	a[1] = #15000 1'b0;
	a[1] = #15000 1'b1;
	a[1] = #30000 1'b0;
	a[1] = #15000 1'b1;
	a[1] = #30000 1'b0;
	a[1] = #15000 1'b1;
	a[1] = #30000 1'b0;
	a[1] = #45000 1'b1;
	a[1] = #75000 1'b0;
	a[1] = #105000 1'b1;
	a[1] = #45000 1'b0;
	a[1] = #30000 1'b1;
	a[1] = #15000 1'b0;
	a[1] = #15000 1'b1;
	a[1] = #15000 1'b0;
	a[1] = #15000 1'b1;
	a[1] = #15000 1'b0;
	a[1] = #30000 1'b1;
	a[1] = #45000 1'b0;
	a[1] = #15000 1'b1;
	a[1] = #30000 1'b0;
	a[1] = #30000 1'b1;
	a[1] = #60000 1'b0;
	a[1] = #15000 1'b1;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
	a[0] = #15000 1'b1;
	a[0] = #30000 1'b0;
	a[0] = #60000 1'b1;
	a[0] = #60000 1'b0;
	a[0] = #30000 1'b1;
	a[0] = #15000 1'b0;
	a[0] = #15000 1'b1;
	a[0] = #30000 1'b0;
	a[0] = #45000 1'b1;
	a[0] = #30000 1'b0;
	a[0] = #15000 1'b1;
	a[0] = #15000 1'b0;
	a[0] = #45000 1'b1;
	a[0] = #15000 1'b0;
	a[0] = #45000 1'b1;
	a[0] = #15000 1'b0;
	a[0] = #15000 1'b1;
	a[0] = #15000 1'b0;
	a[0] = #30000 1'b1;
	a[0] = #15000 1'b0;
	a[0] = #30000 1'b1;
	a[0] = #30000 1'b0;
	a[0] = #60000 1'b1;
	a[0] = #15000 1'b0;
	a[0] = #45000 1'b1;
	a[0] = #15000 1'b0;
	a[0] = #15000 1'b1;
	a[0] = #30000 1'b0;
	a[0] = #60000 1'b1;
	a[0] = #15000 1'b0;
	a[0] = #30000 1'b1;
	a[0] = #15000 1'b0;
	a[0] = #30000 1'b1;
	a[0] = #15000 1'b0;
	a[0] = #15000 1'b1;
	a[0] = #15000 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b1;
	b[3] = #20000 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #40000 1'b0;
	b[3] = #40000 1'b1;
	b[3] = #20000 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #40000 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #20000 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #80000 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #20000 1'b0;
	b[3] = #60000 1'b1;
	b[3] = #40000 1'b0;
	b[3] = #120000 1'b1;
	b[3] = #20000 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #60000 1'b0;
	b[3] = #40000 1'b1;
	b[3] = #40000 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #20000 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #20000 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #20000 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #20000 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #20000 1'b1;
	b[2] = #60000 1'b0;
	b[2] = #20000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #40000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #40000 1'b1;
	b[2] = #60000 1'b0;
	b[2] = #20000 1'b1;
	b[2] = #40000 1'b0;
	b[2] = #20000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #40000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #40000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #20000 1'b1;
	b[2] = #40000 1'b0;
	b[2] = #60000 1'b1;
	b[2] = #40000 1'b0;
	b[2] = #20000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #20000 1'b1;
	b[2] = #60000 1'b0;
	b[2] = #40000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #20000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #60000 1'b1;
	b[2] = #20000 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
	b[1] = #20000 1'b1;
	b[1] = #20000 1'b0;
	b[1] = #80000 1'b1;
	b[1] = #80000 1'b0;
	b[1] = #20000 1'b1;
	b[1] = #80000 1'b0;
	b[1] = #20000 1'b1;
	b[1] = #20000 1'b0;
	b[1] = #60000 1'b1;
	b[1] = #20000 1'b0;
	b[1] = #40000 1'b1;
	b[1] = #100000 1'b0;
	b[1] = #60000 1'b1;
	b[1] = #40000 1'b0;
	b[1] = #20000 1'b1;
	b[1] = #60000 1'b0;
	b[1] = #20000 1'b1;
	b[1] = #40000 1'b0;
	b[1] = #20000 1'b1;
	b[1] = #20000 1'b0;
	b[1] = #40000 1'b1;
	b[1] = #20000 1'b0;
	b[1] = #60000 1'b1;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b1;
	b[0] = #40000 1'b0;
	b[0] = #40000 1'b1;
	b[0] = #100000 1'b0;
	b[0] = #140000 1'b1;
	b[0] = #60000 1'b0;
	b[0] = #40000 1'b1;
	b[0] = #40000 1'b0;
	b[0] = #80000 1'b1;
	b[0] = #60000 1'b0;
	b[0] = #20000 1'b1;
	b[0] = #100000 1'b0;
	b[0] = #40000 1'b1;
	b[0] = #20000 1'b0;
	b[0] = #40000 1'b1;
	b[0] = #20000 1'b0;
	b[0] = #40000 1'b1;
	b[0] = #40000 1'b0;
	b[0] = #40000 1'b1;
	b[0] = #20000 1'b0;
end 

// c
always
begin
	c = 1'b0;
	c = #100000 1'b1;
	#100000;
end 

wrapper_add4_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.c(c),
	.sampler_tx(sampler)
);

wrapper_add4_vlg_check_tst tb_out(
	.CO(CO),
	.HEXO(HEXO),
	.sampler_rx(sampler)
);
endmodule

